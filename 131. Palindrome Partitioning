//https://leetcode.com/problems/palindrome-partitioning/description/

class Solution {
    public void combination(int index,String s,List<String> path,List<List<String>> res){
        if(index == s.length()){
            res.add(new ArrayList<>(path));
            return;
        }
        for(int i = index;i<s.length();i++){
            if(palindrom(s,index,i)){
                path.add(s.substring(index,i+1));
                combination(i+1,s,path,res);
                path.remove(path.size()-1);
            }
        }
    }

    public boolean palindrom(String s, int start, int end){
        while(start<=end){
            if(s.charAt(start++)!=s.charAt(end--)){
                return false;
            }
        }
        return true;
    }

    public List<List<String>> partition(String s) {
        List<List<String>> res=new ArrayList<>();
        combination(0,s,new ArrayList<>(),res);
        return res;
    }
}
