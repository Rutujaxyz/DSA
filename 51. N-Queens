//https://leetcode.com/problems/n-queens/description/

class Solution {
    public void solve(int col,char[][] board,List<List<String>> res,
    int leftrow[], int lowerD[],int upperD[], int n){
        if(col==n){
            res.add(construct(board,n));
            return;
        }
        for(int i =0;i<n;i++){
            if(leftrow[i]==0 && upperD[n-1+i-col]==0 && lowerD[i+col]==0){
                board[i][col]='Q';
            leftrow[i]=1;
            lowerD[col+i]=1;
            upperD[n-1+i-col]=1;
            solve(col+1,board,res,leftrow,lowerD,upperD,n);
            board[i][col] = '.';
            leftrow[i]=0;
            lowerD[col+i]=0;
            upperD[n-1+i-col]=0;
            }

        }
    }
    public List<String> construct(char[][] board,int n){
        List<String> res= new ArrayList<>();
        for(int i =0;i<n;i++){
            String s = new String(board[i]);
            res.add(s);
        }
        return res;
        
    }
    public List<List<String>> solveNQueens(int n) {
        char[][] board = new char[n][n];
        List<List<String>> res = new ArrayList<>();
        for(int i =0;i<n;i++){
            for(int j=0;j<n;j++){
                board[i][j]='.';
            }
        }
        int leftrow[]= new int[n];
        int upperD[] = new int[2*n-1];
        int lowerD[] = new int[2*n-1];
        solve(0,board,res,leftrow,lowerD,upperD,n);
        return res;
    }
}
